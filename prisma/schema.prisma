generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  NEW
  VERIFIED
  CANCELLED
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  birthday       DateTime
  isPrivate      Boolean   @default(false)
  createdAt      DateTime @default(now())
  updatedAt     DateTime       @updatedAt

  followers     Follow[]       @relation("UserFollowers")
  following     Follow[]       @relation("UserFollowing")

  followRequests FollowRequest[]

  boards Board[]
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model FollowRequest {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  follower      User       @relation( fields: [followerId], references: [id])
  followerId    String
  createdAt      DateTime @default(now())
  updatedAt     DateTime       @updatedAt
  status     RequestStatus  @default(NEW)
}

model Follow {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  follower      User           @relation("UserFollowers", fields: [followerId], references: [id])
  followerId    String
  following     User           @relation("UserFollowing", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime       @default(now())
  @@unique([followerId, followingId])
}

model Wish {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  priority     Priority  @default(LOW)
  createdAt    DateTime  @default(now())
  updatedAt     DateTime       @updatedAt

  board        Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId      String
}

model Board {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  isPrivate    Boolean   @default(false)
  createdAt    DateTime  @default(now())

  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String

  wishes   Wish[]
}
